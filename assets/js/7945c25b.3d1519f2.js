(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3160],{7411:()=>{},27852:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"tutorials/getting-started","title":"Getting Started with ZenBPM","description":"This tutorial will guide you through the basics of ZenBPM, helping you set up your first BPMN process and execute it.","source":"@site/docs/tutorials/getting-started.mdx","sourceDirName":"tutorials","slug":"/tutorials/getting-started","permalink":"/zenbpm-docusaurus/tutorials/getting-started","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Tutorials","permalink":"/zenbpm-docusaurus/category/tutorials"},"next":{"title":"How to","permalink":"/zenbpm-docusaurus/category/how-to"}}');var i=t(74848),r=t(28453),o=t(75434);const l={},a="Getting Started with ZenBPM",c={},d=[{value:"What You&#39;ll Learn",id:"what-youll-learn",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Step 1: Install and Run ZenBPM",id:"step-1-install-and-run-zenbpm",level:2},{value:"Step 2: Create a Simple BPMN Process",id:"step-2-create-a-simple-bpmn-process",level:2},{value:"Step 3: Deploy the Process to ZenBPM",id:"step-3-deploy-the-process-to-zenbpm",level:2},{value:"Step 4: Start a Process Instance",id:"step-4-start-a-process-instance",level:2},{value:"Step 5: Monitor the Process Execution",id:"step-5-monitor-the-process-execution",level:2},{value:"Step 6: View Process Activities",id:"step-6-view-process-activities",level:2},{value:"Conclusion",id:"conclusion",level:2},{value:"Next Steps",id:"next-steps",level:2}];function p(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"getting-started-with-zenbpm",children:"Getting Started with ZenBPM"})}),"\n",(0,i.jsx)(n.p,{children:"This tutorial will guide you through the basics of ZenBPM, helping you set up your first BPMN process and execute it."}),"\n",(0,i.jsx)(n.h2,{id:"what-youll-learn",children:"What You'll Learn"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"How to install and run ZenBPM"}),"\n",(0,i.jsx)(n.li,{children:"How to create a simple BPMN process"}),"\n",(0,i.jsx)(n.li,{children:"How to deploy the process to ZenBPM"}),"\n",(0,i.jsx)(n.li,{children:"How to start a process instance"}),"\n",(0,i.jsx)(n.li,{children:"How to monitor the process execution"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Basic understanding of what BPMN is"}),"\n",(0,i.jsx)(n.li,{children:"Docker installed on your machine"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"step-1-install-and-run-zenbpm",children:"Step 1: Install and Run ZenBPM"}),"\n",(0,i.jsx)(n.p,{children:"The easiest way to get started with ZenBPM is to use Docker."}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Pull the ZenBPM Docker image:"}),"\n"]}),"\n",(0,i.jsxs)(n.admonition,{title:"docker image is not published yet",type:"note",children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker pull zenbpm/zenbpm:latest\n"})}),(0,i.jsx)(n.p,{children:"Instead, create a docker image from a Dockerfile"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"git clone git@github.com:pbinitiative/zenbpm.git\ncd zenbpm\ndocker build -t zenbpm .\n"})})]}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"Run the ZenBPM container:"}),"\n"]}),"\n",(0,i.jsxs)(n.admonition,{title:"docker image is not published yet",type:"note",children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker run -d -p 8080:8080 -p 9090:9090 --name zenbpm zenbpm/zenbpm:latest\n"})}),(0,i.jsx)(n.p,{children:"Instead, run the newly built image"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker run -d -p 8080:8080 -p 9090:9090 --name zenbpm zenbpm\n"})})]}),"\n",(0,i.jsx)(n.p,{children:"This will start ZenBPM with:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"REST API available at localhost:8080"}),"\n",(0,i.jsx)(n.li,{children:"gRPC API available at localhost:9090"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"step-2-create-a-simple-bpmn-process",children:"Step 2: Create a Simple BPMN Process"}),"\n",(0,i.jsx)(n.p,{children:'For this tutorial, we\'ll create a simple "Hello World" process with a start event, a message throw event, and an end event.'}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Create a file named ",(0,i.jsx)(n.code,{children:"hello-world.bpmn"})," with the following content:"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="UTF-8"?>\n<bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:di="http://www.omg.org/spec/DD/20100524/DI" id="Definitions_0tl6ily" targetNamespace="http://bpmn.io/schema/bpmn" exporter="Camunda Modeler" exporterVersion="5.35.0">\n    <bpmn:process id="Process_0iehjhs" isExecutable="true">\n        <bpmn:startEvent id="StartEvent_1" name="Start Process">\n            <bpmn:outgoing>Flow_1l01xu9</bpmn:outgoing>\n        </bpmn:startEvent>\n        <bpmn:sequenceFlow id="Flow_1l01xu9" sourceRef="StartEvent_1" targetRef="Event_1" />\n        <bpmn:endEvent id="Event_End" name="End Process">\n            <bpmn:incoming>Flow_02ezsew</bpmn:incoming>\n        </bpmn:endEvent>\n        <bpmn:sequenceFlow id="Flow_02ezsew" sourceRef="Event_1" targetRef="Event_End" />\n        <bpmn:intermediateThrowEvent id="Event_1" name="Throw Event">\n            <bpmn:incoming>Flow_1l01xu9</bpmn:incoming>\n            <bpmn:outgoing>Flow_02ezsew</bpmn:outgoing>\n            <bpmn:messageEventDefinition id="MessageEventDefinition_02xi10c" messageRef="Message_36nekaq" />\n        </bpmn:intermediateThrowEvent>\n    </bpmn:process>\n    <bpmn:message id="Message_36nekaq" name="Message_1" />\n    <bpmndi:BPMNDiagram id="BPMNDiagram_1">\n        <bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="Process_0iehjhs">\n            <bpmndi:BPMNShape id="StartEvent_1_di" bpmnElement="StartEvent_1">\n                <dc:Bounds x="182" y="102" width="36" height="36" />\n                <bpmndi:BPMNLabel>\n                    <dc:Bounds x="167" y="145" width="67" height="14" />\n                </bpmndi:BPMNLabel>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape id="Event_0b5zljm_di" bpmnElement="Event_End">\n                <dc:Bounds x="342" y="102" width="36" height="36" />\n                <bpmndi:BPMNLabel>\n                    <dc:Bounds x="329" y="145" width="63" height="14" />\n                </bpmndi:BPMNLabel>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape id="Event_0xpjar9_di" bpmnElement="Event_1">\n                <dc:Bounds x="262" y="102" width="36" height="36" />\n                <bpmndi:BPMNLabel>\n                    <dc:Bounds x="251" y="145" width="62" height="14" />\n                </bpmndi:BPMNLabel>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNEdge id="Flow_1l01xu9_di" bpmnElement="Flow_1l01xu9">\n                <di:waypoint x="218" y="120" />\n                <di:waypoint x="262" y="120" />\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge id="Flow_02ezsew_di" bpmnElement="Flow_02ezsew">\n                <di:waypoint x="298" y="120" />\n                <di:waypoint x="342" y="120" />\n            </bpmndi:BPMNEdge>\n        </bpmndi:BPMNPlane>\n    </bpmndi:BPMNDiagram>\n</bpmn:definitions>\n'})}),"\n",(0,i.jsx)(n.p,{children:"This BPMN file defines a simple process with:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"A start event"}),"\n",(0,i.jsx)(n.li,{children:"A Message intermediate throw event"}),"\n",(0,i.jsx)(n.li,{children:"An end event"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"step-3-deploy-the-process-to-zenbpm",children:"Step 3: Deploy the Process to ZenBPM"}),"\n",(0,i.jsx)(n.p,{children:"Now that we have our BPMN process, let's deploy it to ZenBPM:"}),"\n",(0,i.jsx)(o.A,{id:"api",pointer:"#/paths/~1process-definitions/post",example:!0}),"\n",(0,i.jsxs)(n.p,{children:["You should receive a response with details about the deployed process definition, including a ",(0,i.jsx)(n.code,{children:"processDefinitionKey"})," that uniquely identifies it."]}),"\n",(0,i.jsx)(n.h2,{id:"step-4-start-a-process-instance",children:"Step 4: Start a Process Instance"}),"\n",(0,i.jsx)(n.p,{children:"With the process definition deployed, we can now start a process instance:"}),"\n",(0,i.jsx)(o.A,{id:"api",pointer:"#/paths/~1process-instances/post",example:!0}),"\n",(0,i.jsxs)(n.p,{children:['This will start a new instance of our "Hello World" process. The response will include a ',(0,i.jsx)(n.code,{children:"processInstanceKey"})," that uniquely identifies this instance."]}),"\n",(0,i.jsx)(n.h2,{id:"step-5-monitor-the-process-execution",children:"Step 5: Monitor the Process Execution"}),"\n",(0,i.jsx)(n.p,{children:"Let's check the status of our process instance:"}),"\n",(0,i.jsx)(o.A,{id:"api",pointer:"#/paths/~1process-instances~1{processInstanceKey}/get",example:!0}),"\n",(0,i.jsxs)(n.p,{children:["Replace ",(0,i.jsx)(n.code,{children:"{processInstanceKey}"})," with the actual key from the previous step."]}),"\n",(0,i.jsx)(n.p,{children:"You should see details about the process instance, including its current state. Since our process is very simple, it might have already completed by the time you check."}),"\n",(0,i.jsx)(n.h2,{id:"step-6-view-process-activities",children:"Step 6: View Process Activities"}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsx)(n.p,{children:"this feature is not implemented yet"})}),"\n",(0,i.jsx)(n.p,{children:"To see what activities were executed in our process:"}),"\n",(0,i.jsx)(o.A,{id:"api",pointer:"#/paths/~1process-instances~1{processInstanceKey}~1activities/get",example:!0}),"\n",(0,i.jsx)(n.p,{children:"This will show you all the activities that were executed as part of the process instance, including the message throw event."}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"Congratulations! You've successfully:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Set up ZenBPM"}),"\n",(0,i.jsx)(n.li,{children:"Created a simple BPMN process"}),"\n",(0,i.jsx)(n.li,{children:"Deployed the process to ZenBPM"}),"\n",(0,i.jsx)(n.li,{children:"Started a process instance"}),"\n",(0,i.jsx)(n.li,{children:"Monitored the process execution"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsx)(n.p,{children:"Now that you've completed this basic tutorial, you might want to:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Learn how to ",(0,i.jsx)(n.a,{href:"/future-feature",children:"create more complex BPMN processes"})," ",(0,i.jsx)("sub",{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.code,{children:"TODO"})})})]}),"\n",(0,i.jsxs)(n.li,{children:["Explore ",(0,i.jsx)(n.a,{href:"/future-feature",children:"user tasks and forms"})," ",(0,i.jsx)("sub",{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.code,{children:"TODO"})})})]}),"\n",(0,i.jsxs)(n.li,{children:["Understand ",(0,i.jsx)(n.a,{href:"/future-feature",children:"message events and correlation"})," ",(0,i.jsx)("sub",{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.code,{children:"TODO"})})})]}),"\n",(0,i.jsxs)(n.li,{children:["Set up ",(0,i.jsx)(n.a,{href:"/future-feature",children:"process monitoring and observability"})," ",(0,i.jsx)("sub",{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.code,{children:"TODO"})})})]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},28453:(e,n,t)=>{"use strict";t.d(n,{R:()=>o,x:()=>l});var s=t(96540);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}},28825:()=>{},67992:()=>{},75434:(e,n,t)=>{"use strict";t.d(n,{A:()=>h});var s=t(98587),i=t(96540),r=t(2151),o=t(37911),l=t(33540),a=(t(94878),t(28794)),c=t(99563),d=t(74848),p=["id","spec","example","pointer"];const h=function(e){var n=e.id,t=e.spec,h=e.example,u=void 0!==h&&h,m=e.pointer,x=(0,s.A)(e,p),j=(0,r.A)(n,t),b=(0,c.r)(j).store,g="#"===m.charAt(0)?m.substring(1):m,w=b.menu.flatItems.find((function(e){return e instanceof a.OperationModel&&e.pointer===g}));if(!w)throw new Error('Failed to resolve reference "'+m+'"');return(0,i.useEffect)((function(){b.menu.dispose()}),[b]),(0,d.jsx)(l.ThemeProvider,{theme:b.options.theme,children:(0,d.jsx)("div",{className:(0,o.A)(["redocusaurus","redocusaurus-operation",u?null:"hide-example"]),children:(0,d.jsx)(a.Section,{id:w.id,$underlined:!0,children:(0,d.jsx)(a.Operation,Object.assign({operation:w},x))})})})}},92441:()=>{},93290:()=>{}}]);