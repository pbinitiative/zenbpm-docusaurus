"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1991],{25987:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"explanation/architecture/architecture-overview","title":"Architecture Overview","description":"ZenBPM is designed with a modular architecture that separates concerns and allows for flexibility and scalability. This document provides an overview of the system\'s architecture and its key components.","source":"@site/docs/explanation/architecture/architecture-overview.md","sourceDirName":"explanation/architecture","slug":"/explanation/architecture/architecture-overview","permalink":"/explanation/architecture/architecture-overview","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docs","previous":{"title":"Architecture","permalink":"/category/architecture"},"next":{"title":"Openapi","permalink":"/openapi"}}');var r=i(74848),s=i(28453);const a={sidebar_position:1},o="Architecture Overview",c={},l=[{value:"High-Level Architecture",id:"high-level-architecture",level:2},{value:"Cluster Diagram",id:"cluster-diagram",level:2},{value:"Core Components",id:"core-components",level:2},{value:"BPMN Engine",id:"bpmn-engine",level:3},{value:"Storage Layer",id:"storage-layer",level:3},{value:"API Layer",id:"api-layer",level:3},{value:"Cluster Management",id:"cluster-management",level:3},{value:"Execution Model",id:"execution-model",level:2},{value:"Observability",id:"observability",level:2}];function d(e){const n={h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"architecture-overview",children:"Architecture Overview"})}),"\n",(0,r.jsx)(n.p,{children:"ZenBPM is designed with a modular architecture that separates concerns and allows for flexibility and scalability. This document provides an overview of the system's architecture and its key components."}),"\n",(0,r.jsx)(n.h2,{id:"high-level-architecture",children:"High-Level Architecture"}),"\n",(0,r.jsx)(n.p,{children:"ZenBPM is built as a distributed system with the following main components:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Core Engine"}),": The heart of the system that executes BPMN processes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Storage Layer"}),": Manages persistence of process state"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"API Layer"}),": Provides interfaces for external systems"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cluster Management"}),": Coordinates distributed execution"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"cluster-diagram",children:"Cluster Diagram"}),"\n",(0,r.jsx)(n.p,{children:"ZenBPM raft cluster"}),"\n",(0,r.jsx)(n.mermaid,{value:"---\nconfig:\n  theme:\n    dark: dark\n---\nflowchart LR\n\n  subgraph Node1 [Node 1]\n  subgraph NodeExec1 [ZenBPM executable]\n    N1ApiP(Public Api)\n    N1ApiI(Internal Api)\n    N1E1(Partition Node<br/>Instance 1/1<br/>**Partition 1 Leader**</br>BPMN engine)\n    N1E2(Partition Node<br/>Instance 1/2</br>BPMN engine)\n    N1E3(Partition Node<br/>Instance 1/3</br>BPMN engine)\n  end\n  end\n\n  subgraph Node2 [Node 2]\n  subgraph NodeExec2 [ZenBPM executable]\n    N2ApiP(Public Api)\n    N2ApiI(Internal Api)\n    N2E1(Partition Node<br/>Instance 2/1</br>BPMN engine)\n    N2E2(Partition Node<br/>Instance 2/2<br/>**Partition 2 Leader**</br>BPMN engine)\n    N2E3(Partition Node<br/>Instance 2/3</br>BPMN engine)\n  end\n  end\n\n  subgraph Node3 [Node 3]\n  subgraph NodeExec3 [ZenBPM executable]\n    N3ApiP(Public Api)\n    N3ApiI(Internal Api)\n    N3E1(Partition Node<br/>Instance 3/1</br>BPMN engine)\n    N3E2(Partition Node<br/>Instance 3/2</br>BPMN engine)\n    N3E3(Partition Node<br/>Instance 3/3<br/>**Partition 3 Leader**</br>BPMN engine)\n  end\n  end\n\n  N1E1 == Partition 1 === N2E1\n  N2E1 == Partition 1 === N3E1\n  N1E2 == Partition 2 === N2E2\n  N2E2 == Partition 2 === N3E2\n  N1E3 == Partition 3 === N2E3\n  N2E3 == Partition 3 === N3E3\n  N1ApiI <-.-> N2ApiI\n  N2ApiI <-.-> N3ApiI\n  N3ApiI <-.-> N1ApiI\n\nclassDef dash stroke-dasharray: 5\nclass NodeExec1,NodeExec2,NodeExec3 dash\n"}),"\n",(0,r.jsx)(n.p,{children:"Communication inside partitions"}),"\n",(0,r.jsx)(n.mermaid,{value:"flowchart\n  subgraph P1 [Partition 1]\n  N1E1(Partition Node<br/>Instance 1/1<br/><b>Partition 1 Leader</b><br/>BPMN engine)\n  N2E1(Partition Node<br/>Instance 2/1<br/>BPMN engine)\n  N3E1(Partition Node<br/>Instance 3/1<br/>BPMN engine)\n  end\n  N1E1 <---\x3e N2E1\n  N2E1 <---\x3e N3E1\n  N3E1 <---\x3e N1E1"}),"\n",(0,r.jsx)(n.mermaid,{value:"flowchart\n  subgraph P2 [Partition 2]\n  N1E2(Partition Node<br/>Instance 1/2<br/>BPMN engine)\n  N2E2(Partition Node<br/>Instance 2/2<br/><b>Partition 2 Leader</b><br/>BPMN engine)\n  N3E2(Partition Node<br/>Instance 3/2<br/>BPMN engine)\n  end\n  N1E2 <---\x3e N2E2\n  N2E2 <---\x3e N3E2\n  N3E2 <---\x3e N1E2"}),"\n",(0,r.jsx)(n.mermaid,{value:"flowchart\n  subgraph P3 [Partition 3]\n  N1E3(Partition Node<br/>Instance 1/3<br/>BPMN engine)\n  N2E3(Partition Node<br/>Instance 2/3<br/>BPMN engine)\n  N3E3(Partition Node<br/>Instance 3/3<br/><b>Partition 3 Leader</b><br/>BPMN engine)\n  end\n  N1E3 <---\x3e N2E3\n  N2E3 <---\x3e N3E3\n  N3E3 <---\x3e N1E3"}),"\n",(0,r.jsx)(n.h2,{id:"core-components",children:"Core Components"}),"\n",(0,r.jsx)(n.h3,{id:"bpmn-engine",children:"BPMN Engine"}),"\n",(0,r.jsx)(n.p,{children:"The BPMN Engine is responsible for:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Parsing and validating BPMN 2.0 process definitions"}),"\n",(0,r.jsx)(n.li,{children:"Creating and managing process instances"}),"\n",(0,r.jsx)(n.li,{children:"Executing process logic according to the BPMN specification"}),"\n",(0,r.jsx)(n.li,{children:"Managing execution tokens and flow control"}),"\n",(0,r.jsx)(n.li,{children:"Handling events, gateways, and tasks"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The engine uses a token-based execution model where tokens flow through the process graph, activating elements as they are encountered."}),"\n",(0,r.jsx)(n.h3,{id:"storage-layer",children:"Storage Layer"}),"\n",(0,r.jsxs)(n.p,{children:["ZenBPM uses ",(0,r.jsx)(n.strong,{children:"rqlite"})," as its storage backend, which provides:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Distributed SQL database built on SQLite"}),"\n",(0,r.jsx)(n.li,{children:"Strong consistency through the Raft consensus algorithm"}),"\n",(0,r.jsx)(n.li,{children:"Durability of process state across node failures"}),"\n",(0,r.jsx)(n.li,{children:"Horizontal scalability"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"api-layer",children:"API Layer"}),"\n",(0,r.jsx)(n.p,{children:"The API layer provides interfaces for external systems to interact with ZenBPM:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"REST API"}),": HTTP-based API following RESTful principles"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"gRPC API"}),": High-performance RPC framework for system-to-system communication"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Both APIs provide similar functionality, allowing clients to:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Deploy process definitions"}),"\n",(0,r.jsx)(n.li,{children:"Start process instances"}),"\n",(0,r.jsx)(n.li,{children:"Query process state"}),"\n",(0,r.jsx)(n.li,{children:"Complete tasks"}),"\n",(0,r.jsx)(n.li,{children:"Correlate messages"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"cluster-management",children:"Cluster Management"}),"\n",(0,r.jsx)(n.p,{children:"ZenBPM supports distributed execution through its cluster management component, which:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Coordinates node discovery and membership"}),"\n",(0,r.jsx)(n.li,{children:"Manages leader election"}),"\n",(0,r.jsx)(n.li,{children:"Ensures consistency of distributed state"}),"\n",(0,r.jsx)(n.li,{children:"Handles node failures and recovery"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"execution-model",children:"Execution Model"}),"\n",(0,r.jsx)(n.p,{children:"ZenBPM follows a token-based execution model:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"When a process instance is created, tokens are placed at all start events"}),"\n",(0,r.jsx)(n.li,{children:"Tokens flow through the process graph, activating elements as they are encountered"}),"\n",(0,r.jsx)(n.li,{children:"When a token reaches an activity, the activity is executed"}),"\n",(0,r.jsx)(n.li,{children:"After activity execution, tokens are generated on outgoing sequence flows"}),"\n",(0,r.jsx)(n.li,{children:"Gateways control the flow of tokens based on conditions or parallel execution"}),"\n",(0,r.jsx)(n.li,{children:"When a token reaches an end event, it is consumed"}),"\n",(0,r.jsx)(n.li,{children:"A process instance is completed when all tokens are consumed"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"observability",children:"Observability"}),"\n",(0,r.jsx)(n.p,{children:"ZenBPM integrates with OpenTelemetry to provide:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Distributed tracing of process execution"}),"\n",(0,r.jsx)(n.li,{children:"Metrics for monitoring system performance"}),"\n",(0,r.jsx)(n.li,{children:"Logging for debugging and auditing"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This allows operators to monitor the health and performance of the system and troubleshoot issues."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var t=i(96540);const r={},s=t.createContext(r);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);